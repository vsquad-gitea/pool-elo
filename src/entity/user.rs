//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "user")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(unique)]
    pub username: String,
    pub password_hash_and_salt: String,
    pub nickname: Option<String>,
    pub creation_time: DateTime,
    pub last_active_time: DateTime,
    pub is_admin: bool,
    pub email: Option<String>,
    pub avatar: Option<String>,
    pub forgot_password_request: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::team_result_to_user::Entity")]
    TeamResultToUser,
}

impl Related<super::team_result_to_user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TeamResultToUser.def()
    }
}

impl Related<super::team_result::Entity> for Entity {
    fn to() -> RelationDef {
        super::team_result_to_user::Relation::TeamResult.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::team_result_to_user::Relation::User.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
