//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.0

use super::sea_orm_active_enums::GameType;
use super::sea_orm_active_enums::PlayerSetupType;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "game")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub player_setup_type: Option<PlayerSetupType>,
    pub game_type: Option<GameType>,
    pub time: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::one_vs_one::Entity")]
    OneVsOne,
}

impl Related<super::one_vs_one::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::OneVsOne.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
